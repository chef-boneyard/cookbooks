{
  "name": "database",
  "description": "Sets up the database master or slave",
  "long_description": "Database Cookbook\n=================\n\nConfigures mysql database masters and slaves and uses EBS for storage, integrating together with the application cookbook utilizing data bags for application related information.\n\nThis cookbook is written primarily to use MySQL and the Opscode mysql cookbook. Other RDBMS may be supported at a later date.\n\nThis cookbook does not automatically restore database dumps, but does install tools to help with that.\n\nRequirements\n============\n\nChef 0.8 or higher required.\n\nPlatform\n--------\n\nUbuntu, Debian, Red Hat, CentOS or Fedora.\n\nCookbooks\n---------\n\nThe following Opscode cookbooks are dependencies:\n\n* mysql\n* xfs\n* aws\n\nRecipes\n=======\n\n`ebs_volume`\n------------\n\nLoads the aws information from the data bag. Searches the applications data bag for the database master or slave role and checks that role is applied to the node. Loads the EBS information and the master information from data bags. Uses the aws cookbook LWRP, `aws_ebs_volume` to manage the volume.\n\nOn a master node:\n* if we have an ebs volume already as stored in a data bag, attach it.\n* if we don't have the ebs information then create a new one and attach it.\n* store the volume information in a data bag via a ruby block.\n\nOn a slave node:\n* use the master volume information to generate a snapshot.\n* create the new volume from the snapshot and attach it.\n\nAlso on a master node, generate some configuration for running a snapshot via `chef-solo` from cron.\n\nOn a new filesystem volume, create as XFS, then mount it in /mnt, and also bind-mount it to the mysql data directory (default /var/lib/mysql).\n\nmaster\n------\n\nThis recipe no longer loads AWS specific information, and the database position for replication is no longer stored in a databag because the client might not have permission to write to the databag item. This may be handled in a different way at a future date.\n\nSearches the apps databag for applications, and for each one it will check that the specified database master role is set in both the databag and applied to the node's run list. Then, retrieves the passwords for `root`, `repl` and `debian` users and saves them to the node attributes. If the passwords are not found in the databag, it prints a message that they'll be generated by the mysql cookbook.\n\nThen it adds the application databag database settings to a hash, to use later.\n\nIt sets up the template resource for `/etc/mysql/app_grants.sql`, passing in the database settings so privileges for application specific database users can be created.\n\nThen it will iterate over the databases and create them with the `mysql_database` LWRP, detecting their presence with the mysql rubygem.\n\nslave\n-----\n\n_TODO_: Retrieve the master status from a data bag, then start replication using a ruby block. The replication status needs to be handled in some other way for now since the master recipe above doesn't actually set it in the databag anymore.\n\nsnapshot\n--------\n\nRun via Chef Solo. Retrieves the db snapshot configuration from the specified JSON file. Uses the `mysql_database` LWRP to lock and unlock tables, and does a filesystem freeze and EBS snapshot.\n\nDeprecated Recipes\n==================\n\nThe following recipe is considered deprecated. It is kept for reference purposes.\n\n`ebs_backup`\n------------\n\nOlder style of doing mysql snapshot and replication using Adam Jacob's [ec2_mysql](http://github.com/adamhjk/ec2_mysql) script and library.\n\nData Bags\n=========\n\nThis cookbook uses the apps data bag item for the specified application; see the `application` cookbook's README.md. It also creates data bag items in a bag named 'aws' for storing volume information. In order to interact with EC2, it expects aws to have a main item:\n\n    {\n      \"id\": \"main\",\n      \"ec2_private_key\": \"private key as a string\",\n      \"ec2_cert\": \"certificate as a string\",\n      \"aws_account_id\": \"\",\n      \"aws_secret_access_key\": \"\",\n      \"aws_access_key_id\": \"\"\n    }\n\nNote: with the Open Source Chef Server, the server using the database recipes must be an admin client or it will not be able to create data bag items. You can modify whether the client is admin by editing it with knife.\n\n    knife client edit <client_name>\n    {\n      ...\n      \"admin\": true\n      ...\n    }\n\nThis is not required if the Chef Server is the Opscode Platform, instead use the ACL feature to modify access for the node to be able to update the data bag.\n\nUsage\n=====\n\nAside from the application data bag (see the README in the application cookbook), create a role for the database master. Use a role.rb in your chef-repo, or create the role directly with knife.\n\n    % knife role show my_app_database_master\n    {\n      \"name\": \"my_app_database_master\",\n      \"chef_type\": \"role\",\n      \"json_class\": \"Chef::Role\",\n      \"default_attributes\": {\n      },\n      \"description\": \"\",\n      \"run_list\": [\n        \"recipe[mysql::server]\",\n        \"recipe[database::master]\"\n      ],\n      \"override_attributes\": {\n      }\n    }\n\nAlso create a `production` role, or other role based on your desired environment. This is also used in the `application` cookbook.\n\n    % knife role show production\n    {\n      \"name\": \"production\",\n      \"chef_type\": \"role\",\n      \"json_class\": \"Chef::Role\",\n      \"default_attributes\": {\n        \"app_environment\": \"production\"\n      },\n      \"description\": \"production environment role\",\n      \"run_list\": [\n\n      ],\n      \"override_attributes\": {\n      }\n    }\n\nThe cookbook `my_app_database` is recommended to set up any application specific database resources such as configuration templates, trending monitors, etc. It is not required, but you would need to create it separately in `site-cookbooks`. Add it to the `my_app_database_master` role.\n\nLicense and Author\n==================\n\nAuthor:: Adam Jacob (<adam@opscode.com>)\nAuthor:: Joshua Timberman (<joshua@opscode.com>)\nAuthor:: AJ Christensen (<aj@opscode.com>)\nAuthor:: Seth Chisamore (<schisamo@opscode.com>)\n\nCopyright 2009-2011, Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
    "debian": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "suse": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "redhat": ">= 0.0.0"
  },
  "dependencies": {
    "mysql": ">= 0.0.0",
    "aws": ">= 0.0.0",
    "xfs": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "database": "Empty placeholder",
    "database::ebs_backup": "Considered deprecated, older way of backing up EBS volumes",
    "database::ebs_volume": "Sets up an EBS volume in EC2 for the database",
    "database::master": "Creates application specific user and database",
    "database::snapshot": "Locks tables and freezes XFS filesystem for replication, assumes EC2 + EBS"
  },
  "version": "0.99.0"
}